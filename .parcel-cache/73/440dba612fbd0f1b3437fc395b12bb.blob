"use strict";
var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = Sequence;
  var _react = _interopRequireDefault(require("react"));
  var _Column = _interopRequireDefault(require("./Column"));
  var _PlaybackControls = _interopRequireDefault(require("./PlaybackControls"));
  var _jsxRuntime = require("react/jsx-runtime");
  var _s2 = $RefreshSig$();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || (/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/).test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit(arr, i) {
    var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  function Sequence(_ref) {
    _s2();
    var socket = _ref.socket;
    var _useState = useState(), _useState2 = _slicedToArray(_useState, 2), currentSequence = _useState2[0], setCurrentSequence = _useState2[1];
    var _useState3 = useState(0), _useState4 = _slicedToArray(_useState3, 2), currentStepNumber = _useState4[0], setCurrentStepNumber = _useState4[1];
    var _useState5 = useState(false), _useState6 = _slicedToArray(_useState5, 2), sequenceWasRendered = _useState6[0], setSequenceWasRendered = _useState6[1];
    useEffect(function () {
      // socket = io(ENDPOINT);
      // socket.on('success', response => {
      // setConnectionStatus(response);
      // })
      socket.on('sequence', function (sequence) {
        console.log('sequence received by Admin: ', sequence);
        setCurrentSequence(sequence);
        setSequenceWasRendered(true);
      });
      socket.on('step', function (step) {
        setcurrentStepNumber(step);
      });
    }, []);
    return (
      /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "sequencer-container",
        children: (currentSequence || [[]]).map(function (currentColumnValues, index) {
          return (
            /*#__PURE__*/(0, _jsxRuntime.jsx)(_Column["default"], {
              currentColumnValues: currentColumnValues,
              currentStepNumber: currentStepNumber,
              currentColumnNumber: index
            }, index)
          );
        })
      })
    );
  }
  _s2(Sequence, "/y/XlLViM+Xj895MPqZJwKOyj4s=");
  _c = Sequence;
  var _c;
  $RefreshReg$(_c, "Sequence");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
