"use strict";
var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = WebRTCBroadcast;
  var _react = _interopRequireWildcard(require("react"));
  var _jsxRuntime = require("react/jsx-runtime");
  var _s2 = $RefreshSig$();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
      return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {
        "default": obj
      };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || (/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/).test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit(arr, i) {
    var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
  var peerConnections = {};
  var config = {
    iceServers: [{
      urls: ["stun:stun.l.google.com:19302"]
    }]
  };
  var constraints = {
    video: true,
    audio: true
  };
  var video;
  function WebRTCBroadcast(_ref) {
    _s2();
    var socket = _ref.socket;
    var _useState = (0, _react.useState)(null), _useState2 = _slicedToArray(_useState, 2), stream = _useState2[0], setStream = _useState2[1];
    var userVideo = (0, _react.useRef)(null);
    var enableVideo = function enableVideo() {
      navigator.mediaDevices.getUserMedia(constraints).then(function (currentStream) {
        setStream(currentStream);
      })["catch"](function (error) {
        return console.error(error);
      });
      socket.emit("broadcaster");
    };
    (0, _react.useEffect)(function () {
      if (userVideo.current) {
        userVideo.current.srcObject = stream;
      }
      socket.emit("broadcaster");
      socket.on("watcher", function (id) {
        console.log('watcher admin side', id);
        var peerConnection = new RTCPeerConnection(config);
        peerConnections[id] = peerConnection;
        stream.getTracks().forEach(function (track) {
          return peerConnection.addTrack(track, stream);
        });
        peerConnection.onicecandidate = function (event) {
          if (event.candidate) {
            socket.emit("candidate", id, event.candidate);
          }
        };
        peerConnection.createOffer().then(function (sdp) {
          return peerConnection.setLocalDescription(sdp);
        }).then(function () {
          socket.emit("offer", id, peerConnection.localDescription);
        });
      });
      socket.on("answer", function (id, description) {
        peerConnections[id].setRemoteDescription(description);
      });
      socket.on("candidate", function (id, candidate) {
        peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));
      });
      socket.on("disconnectPeer", function (id) {
        peerConnections[id].close();
        delete peerConnections[id];
      });
    }, [stream]);
    return (
      /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("video", {
          playsInline: true,
          ref: userVideo,
          autoPlay: true,
          muted: true
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
          onClick: enableVideo,
          children: "Start Video"
        })]
      })
    );
  }
  _s2(WebRTCBroadcast, "Mhwsk1+Kg2b1co8inPxOv5Hq1eE=");
  _c = WebRTCBroadcast;
  var _c;
  $RefreshReg$(_c, "WebRTCBroadcast");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
