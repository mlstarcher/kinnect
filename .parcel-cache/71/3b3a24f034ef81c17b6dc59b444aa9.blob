"use strict";
var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = WebRTCWatcher;
  var _react = _interopRequireWildcard(require("react"));
  var _jsxRuntime = require("react/jsx-runtime");
  var _s = $RefreshSig$();
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
      return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {
        "default": obj
      };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  var config = {
    iceServers: [{
      urls: ["stun:stun.l.google.com:19302"]
    }]
  };
  var peerConnection;
  function WebRTCWatcher(_ref) {
    _s();
    var socket = _ref.socket;
    // const [stream, setStream] = useState(null);
    var videoRef = (0, _react.useRef)(null);
    (0, _react.useEffect)(function () {
      socket.on("offer", function (id, description) {
        console.log('offer received, ', id, description);
        peerConnection = new RTCPeerConnection(config);
        peerConnection.setRemoteDescription(description).then(function () {
          return peerConnection.createAnswer();
        }).then(function (sdp) {
          return peerConnection.setLocalDescription(sdp);
        }).then(function () {
          socket.emit("answer", id, peerConnection.localDescription);
        });
        peerConnection.ontrack = function (event) {
          var video = videoRef.current;
          console.log('video is: ', video);
          video.srcObject = event.streams[0];
        };
        peerConnection.onicecandidate = function (event) {
          if (event.candidate) {
            socket.emit("candidate", id, event.candidate);
          }
        };
      });
      socket.on("candidate", function (id, candidate) {
        peerConnection.addIceCandidate(new RTCIceCandidate(candidate))["catch"](function (e) {
          return console.error(e);
        });
      });
      socket.emit("watcher");
      // socket.on("success", () => {
      // console.log('did client succeed and emit a watcher?')
      // socket.emit("watcher");
      // });
      socket.on("broadcaster", function () {
        console.log('broadcaster');
        socket.emit("watcher");
      });
    }, []);
    return (
      /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("video", {
          playsInline: true,
          ref: videoRef,
          autoPlay: true,
          muted: true
        })
      })
    );
  }
  _s(WebRTCWatcher, "PdMsmLAy5JKU3vCrhAlqGYQfKuA=");
  _c = WebRTCWatcher;
  var _c;
  $RefreshReg$(_c, "WebRTCWatcher");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
